#!/bin/sh
# check_cloudwatch, plugin script to use with Nagios 
# version: 1.3 - Forced any "Bytes" to return into a human readable format - AllyUnion
# version: 1.2 - arguments changed due to support for multiple regions
# author: @j3tm0t0
#
# pre-requirement: Amazon CloudWatch API Tools installed
# http://developer.amazonwebservices.com/connect/entry.jspa?externalID=2534&categoryID=88
#
# please check README.txt or README-ja.txt for more detail and disclaimer
#

if [ "$8" = "" ]
then
	cat <<EOF
UNKNOWN: number of arguments is wrong.
usage: $0 <RegionName> <MeasureName> <statistics> <namespace> <dimensions> <period> <warning> <critical>

 RegionName  : us-east-1, us-west-1...
 MeasureName : CPUUtilization, FreeableMemory , etc...
 statistics  : Average , Minimum , Maximum , Sum , etc...
 namespace   : AWS/EC2 , AWS/RDS , ec...
 dimensions  : InstanceId=i-xxxxxxxx , ImageId=ami-yyyyyyyy , etc...
 period      : seconds ( multiply of 60 )
 warning     : warning threshold
 critical    : critical threshold

ex: check_cloudwatch us-east-1 CPUUtilization "Average" "AWS/EC2" "InstanceId=i-xxxxxxxx" 360 60 80 [-I AWS_ACCESS_KEY -S AWS_SECRET_KEY]
EOF
	exit 3
fi

if [ -f /etc/profile.d/cloudwatch.sh ]; then
    source /etc/profile.d/cloudwatch.sh
fi

starttime=`date -u +%Y-%m-%dT%H:%M:00 -d "$6 sec ago"`
endtime=`date -u +%Y-%m-%dT%H:%M:00`

# retrieve data by calling API tool
COMMAND="mon-get-stats --region \"$1\" --metric-name \"$2\" --statistics \"$3\" --namespace \"$4\" --start-time $starttime --end-time $endtime --period $6"
if [[ "$5" != "" ]]; then
    COMMAND="$COMMAND --dimensions \"$5\""
fi
export MEASURE=$2
export WARNING=$7
export CRITICAL=$8
shift 6
RESPONSE=`$COMMAND $@`

VALUE=`echo $RESPONSE | awk '{print $3}'`
UNIT=`echo $RESPONSE | awk '{print $4}'`

# using in-line perl to compare float values
export VALUE
export UNIT

perl -e '
if ($ENV{"VALUE"} eq "")
{
	print $ENV{"MEASURE"}." UNKNOWN - failed to retrieve data. check arguments.\n";
	exit 3;
}
@units = ("Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Petabytes", "Exabytes", "Zettabytes", "Yottabytes");
$value = $ENV{"VALUE"};
$unit = $ENV{"UNIT"};
$unitvalue = 1024;
if ($ENV{"UNIT"} eq "Bytes")
{
        $j = 0;
        for ($unitvalue = 1024; $unitvalue < $ENV{"VALUE"}; $unitvalue *= 1024) {
                $j++;
        }
        $unitvalue /= 1024;
	$value = $ENV{"VALUE"} / $unitvalue;
	$unit = $units[$j];
}
if ($ENV{"WARNING"} <= $ENV{"CRITICAL"})
{
	if ($ENV{"VALUE"} > $ENV{"CRITICAL"})
	{
		if ($ENV{"UNIT"} eq "Bytes")
		{
			print $ENV{"MEASURE"}." CRITICAL - $value $unit > ".($ENV{"CRITICAL"} / $unitvalue)."\n";
		}
		else
		{
			print $ENV{"MEASURE"}." CRITICAL - ".$ENV{"VALUE"}." ".$ENV{"UNIT"}." > ".$ENV{"CRITICAL"}."\n";
		}
		exit 2;
	}
	elsif ($ENV{"VALUE"} > $ENV{"WARNING"})
	{
		if ($ENV{"UNIT"} eq "Bytes")
		{
			print $ENV{"MEASURE"}." WARNING - $value $unit > ".($ENV{"WARNING"} / $unitvalue)."\n";
		}
		else
		{
			print $ENV{"MEASURE"}." WARNING - ".$ENV{"VALUE"}." ".$ENV{"UNIT"}." > ".$ENV{"WARNING"}."\n";
		}
		exit 1
	}
}
else
{
	if ($ENV{"VALUE"} < $ENV{"CRITICAL"})
	{
		if ($ENV{"UNIT"} eq "Bytes")
		{
			print $ENV{"MEASURE"}." CRITICAL - $value $unit < ".($ENV{"CRITICAL"} / $unitvalue)."\n";
		}
		else
		{
			print $ENV{"MEASURE"}." CRITICAL - ".$ENV{"VALUE"}." ".$ENV{"UNIT"}." < ".$ENV{"CRITICAL"}."\n";
		}
		exit 2;
	}
	elsif ($ENV{"VALUE"} < $ENV{"WARNING"})
	{
		if ($ENV{"UNIT"} eq "Bytes")
		{
			print $ENV{"MEASURE"}." WARNING - $value $unit < ".($ENV{"WARNING"} / $unitvalue)."\n";
		}
		else
		{
			print $ENV{"MEASURE"}." WARNING - ".$ENV{"VALUE"}." ".$ENV{"UNIT"}." < ".$ENV{"WARNING"}."\n";
		}
		exit 1
	}
}
if ($ENV{"UNIT"} eq "Bytes")
{
	print $ENV{"MEASURE"}." OK - $value $unit\n";
}
else
{
	print $ENV{"MEASURE"}." OK - ".$ENV{"VALUE"}." ".$ENV{"UNIT"}."\n";
}
exit 0;
'
exit $?
